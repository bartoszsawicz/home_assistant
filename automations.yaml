#
# Waking up
#
- id: open_kitchen_blinds_in_the_morning
  alias: Open blinds in the morning for some sun
  trigger:
    platform: state
    entity_id: input_boolean.blinds_can_be_opened_time
    to: 'on'
  condition:
    condition: state
    entity_id: input_boolean.blinds_can_be_opened_users
    state: 'on'
  action:
  - service: cover.set_cover_position
    data_template:
      entity_id: cover.level
      position: "{{ states('input_number.kitchen_blinds_morning_position') | int }}"
#
# Store current blinds position after leaving home
#
- id: store_blinds_position_after_leaving_home
  alias: Store current blinds position after leaving home
  trigger:
    platform: state
    entity_id: input_boolean.blinds_can_be_opened_users
    to: 'off'
  condition:
    condition: time
    after: '09:30:00'
  action:
  - service: input_number.set_value
    data_template:
      entity_id: input_number.kitchen_blinds_saved_position
      value: "{{ state_attr('cover.level','current_position') | int }}"
  
#
# Leaving home during the day should close blinds
#
- id: close_blinds_after_leaving_home
  alias: Close blinds whene everyon leaves
  trigger:
    platform: state
    entity_id: input_boolean.blinds_can_be_opened_users
    to: 'off'
    for:
      seconds: 10
  action:
  - service: cover.close_cover
    data:
      entity_id: cover.level
#
# Coming back home during day should restore blinds to stored position
#
- id: open_kitchen_blinds_when_users_are_back_home
  alias: Open blinds when someone comes home
  trigger:
    platform: state
    entity_id: input_boolean.blinds_can_be_opened_users
    to: 'on'
  condition:
    condition: state
    entity_id: input_boolean.blinds_can_be_opened_time
    state: 'on'
  action:
  - service: cover.set_cover_position
    data_template:
      entity_id: cover.level
      position: "{{ states('input_number.kitchen_blinds_saved_position') | int }}"
#
# Transit from 'morning' to 'default' blinds position
#
- id: open_kitchen_blinds_when_users_are_back_home
  alias: Open blinds to default position after morning
  trigger:
    platform: time
    at: '09:30:00'
  condition:
    - condition: state
      entity_id: input_boolean.blinds_can_be_opened_time
      state: 'on'
    - condition: state
      entity_id: input_boolean.blinds_can_be_opened_users
      state: 'on'
  action:
  - service: cover.set_cover_position
    data_template:
      entity_id: cover.level
      position: "{{ states('input_number.kitchen_blinds_saved_position') | int }}"
- id: set_saved_position_to_default_after_morning
  alias: Set saved blinds position to default after morning is over 
  trigger:
    platform: time
    at: '09:30:00'
  action:
  - service: input_number.set_value
    data_template:
      entity_id: input_number.kitchen_blinds_saved_position
      value: "{{ states('input_number.kitchen_blinds_default_position') | int }}"
#
# Ready for night
#
- id: close_kitchen_blinds_at_night
  alias: Close kitchen blinds after sunset
  trigger:
    platform: state
    entity_id: input_boolean.blinds_can_be_opened_time
    to: 'off'
  condition:
    - condition: state
      entity_id: binary_sensor.living_room_sensor_node_2_3
      state: 'off'
  action:
  - service: cover.close_cover
    data:
      entity_id: cover.level

- id: close_kitchen_blinds_at_night_misfire
  alias: 'Close kitchen blinds after sunset - misifre notification'
  trigger:
    platform: state
    entity_id: input_boolean.blinds_can_be_opened_time
    to: 'on'
  condition:
    - condition: state
      entity_id: binary_sensor.living_room_sensor_node_2_3
      state: 'on'
    - condition: state
      entity_id: cover.level
      state: 'open'
  action:
  - service: notify.push
    data:
      message: 'Not closing kitchen blinds, as window is open.'
      data:
        actions:
          - action: 'close_kitchen_blinds'
            title: 'Close anyway'

- id: close_kitchen_blinds_event
  alias: Close kitchen blinds override
  trigger:
    platform: event
    event_type: html5_notification.clicked
    event_data:
      action: 'close_kitchen_blinds'
  action:
  - service: cover.close_cover
    data:
      entity_id: cover.level

#
# Setting helpers for blinds control
#
- id: set_blinds_should_remain_closed_at_night
  alias: '[Helper] blinds can be open by time = false'
  trigger:
    platform: sun
    event: sunset
    offset: '+00:30:00'
  action:
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.blinds_can_be_opened_time
- id: set_blinds_can_be_open_during_day
  alias: '[Helper] blinds can be open by time = true'
  trigger:
    platform: time
    seconds: 30
  condition:
    condition: and
    conditions:
      - condition: state      # This condition is so this rule doesn't spam logbook during day
        entity_id: input_boolean.blinds_can_be_opened_time
        state: 'off'
      - condition: sun  
        after: sunrise
        after_offset: '-00:30:00'
      - condition: or
        conditions:
          - condition: time
            after: '06:00:00'
            before: '15:00:00'
            weekday:
              - mon
              - tue
              - wed
              - thu
              - fri
          - condition: time
            after: '07:30:00'
            before: '15:00:00'
            weekday:
              - sat
              - sun
  action:
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.blinds_can_be_opened_time
- id: set_blinds_should_be_closed_when_users_are_absent
  alias: '[Helper] blinds can be open by users = false'
  trigger:
    platform: state
    entity_id: group.users
    to: 'not_home'
    for:
      minutes: 15
  action:
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.blinds_can_be_opened_users
- id: set_blinds_can_be_open_when_users_are_home
  alias: '[Helper] blinds can be open by users = true'
  trigger:
    platform: state
    entity_id: group.users
    to: 'home'
  action:
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.blinds_can_be_opened_users
- id: reset_saved_position_at_night
  alias: '[Helper] reset blinds saved position'
  trigger:
    platform: time
    at: '00:00:00'
  action:
    - service: input_number.set_value
      data_template:
        entity_id: input_number.kitchen_blinds_saved_position
        value: "{{ states('input_number.kitchen_blinds_default_position') | int }}"
#
# GARDEN sprinklers and lights
#
- id: turn_on_sprinkler1
  alias: Turn on 1st sprinkler
  initial_state: 'off'
  trigger:
    platform: time
    at: 01:00:00
  action:
    service: homeassistant.turn_on
    entity_id: switch.sprinkler_1_1
- id: turn_off_sprinkler1
  alias: Turn off 1st sprinkler after 5 minutes
  initial_state: 'off'
  trigger:
    platform: state
    entity_id: switch.sprinkler_1_1
    from: 'off'
    to: 'on'
    for:
      minutes: 5
  action:
    service: homeassistant.turn_off
    entity_id: switch.sprinkler_1_1

- id: light_up_terrace_when_dark
  alias: Lit terrace up when dark
  trigger:
  - platform: sun
    event: sunset
    offset: '+01:00:00'
  condition:
    condition: template
    value_template: "{{ not is_state('group.users', 'home') }}"
  action:
  - service: script.turn_on_terrace_lights
- id: turn_off_garden_lights_in_late_evening
  alias: Turn off garden lights late evening
  trigger:
    platform: sun
    event: sunset
    offset: '+04:00:00'
  action:
  - service: script.turn_off_terrace_lights

#
# Alarm
#
- id: alarm_armed_away
  alias: '[Alarm] Away Mode Armed'
  trigger:
  - platform: state
    entity_id: alarm_control_panel.house
    to: armed_away
  action:
  - data:
      message: The house alarm has been switched on in away mode. Goodbye
    service: notify.discord_notify
- id: alarm_armed_home
  alias: '[Alarm] Home Mode Armed'
  trigger:
  - platform: state
    entity_id: alarm_control_panel.house
    to: armed_home
  action:
  - data:
      message: The house alarm has been switched on in home mode. Goodnight
    service: notify.discord_notify
- id: alarm_arming_away
  alias: '[Alarm] Away Mode Arming'
  trigger:
  - platform: state
    entity_id: alarm_control_panel.house
    to: pending
  action:
  - data:
      message: House alarm activating, ensure all doors and windows are closed
    service: notify.discord_notify
- id: alarm_disarmed
  alias: '[Alarm] Disarmed'
  trigger:
  - platform: state
    entity_id: alarm_control_panel.house
    to: disarmed
  action:
  - data:
      message: The house alarm has been Deactivated
    service: notify.discord_notify
- id: alarm_triggered
  alias: '[Alarm] Triggered'
  trigger:
  - platform: state
    entity_id: alarm_control_panel.house
    to: triggered
  action:
  - service: notify.discord_alert
    data:
      message: ALARM TRIGGERED!!! {{ states[states.alarm_control_panel.house.attributes.changed_by.split(".")[0]][
        states.alarm_control_panel.house.attributes.changed_by.split(".")[1]].name
        }}
- id: alarm_warning
  alias: '[Alarm] Warning'
  trigger:
  - platform: state
    entity_id: alarm_control_panel.house
    to: warning
  action:
  - service: notify.discord_alert
    data:
      message: ALARM Warning {{ states[states.alarm_control_panel.house.attributes.changed_by.split(".")[0]][
        states.alarm_control_panel.house.attributes.changed_by.split(".")[1]].name
        }}
- id: arm_alarm_when_all_users_left_home
  alias: '[Alarm] Auto arm'
  condition:
    condition: state
    entity_id: alarm_control_panel.house
    state: disarmed
  trigger:
    platform: state
    entity_id: group.users
    to: not_home
    for:
      minutes: 21
  action:
  - service: alarm_control_panel.alarm_arm_away
- id: disarm_alarm_when_user_comes_home
  alias: '[Alarm] Auto disarm'
  condition:
    condition: state
    entity_id: alarm_control_panel.house
    state: armed_away
  trigger:
    platform: state
    entity_id: group.users
    to: home
  action:
  - service: alarm_control_panel.alarm_disarm
    data:
      entity_id: alarm_control_panel.house
      code: 5464
- id: blink_garden1_light_when_alarm_triggered
  alias: Blink Garden Terrace Light When Alarm Triggered
  condition:
    condition: state
    entity_id: alarm_control_panel.house
    state: triggered
  trigger:
    platform: time
    seconds: /2
  action:
  - service: switch.toggle
    data:
      entity_id: switch.gateway_0_7
  - service: switch.toggle
    data:
      entity_id: switch.gateway_0_8
- id: cleanup_after_triggered_alarm_timeouts
  alias: Garden lights on after triggered alarm timeouts
  trigger:
  - platform: state
    entity_id: alarm_control_panel.house
    from: triggered
    to: armed_away
  action:
  - service: script.turn_on_terrace_lights
- id: cleanup_after_triggered_alarm_deactivated
  alias: Cleanup after alarm deactivated
  trigger:
  - platform: state
    entity_id: alarm_control_panel.house
    from: triggered
    to: disarmed
  action:
  - service: script.turn_off_terrace_lights

#
# Warnings, notifications
#
- id: alert_when_cold_and_window_open_for_too_long
  alias: Alert when window open for long time
  condition:
    condition: numeric_state
    entity_id: sensor.yr_temperature
    below: 10
  trigger:
    platform: state
    entity_id:
    - binary_sensor.living_room_sensor_node_2_2
    - binary_sensor.living_room_sensor_node_2_3
    - binary_sensor.living_room_sensor_node_2_4
    - binary_sensor.bedroom_2_sensor_node_3_2
    - binary_sensor.bedroom_sensor_node_4_2
    to: 'on'
    for:
      minutes: 20
  action:
  - service: notify.discord_alert
    data_template:
      message: '{{ trigger.to_state.attributes.friendly_name }} is opened too long'

