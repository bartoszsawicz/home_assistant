# Workaround for broken tasmota that doesn't reconnect mqtt
- id: restart_kids_lights_on_mqtt_disconnect
  trigger:
    platform: state
    entity_id: light.sonoff_kids_ceiling_light
    to: 'unavailable'
  action:
    - service: shell_command.restart_kids_tasmota


#
# Waking up
#
- id: open_blinds_in_the_morning
  alias: Open blinds in the morning for some sun
  trigger:
    platform: state
    entity_id: input_boolean.blinds_can_be_opened_time
    to: 'on'
  condition:
    condition: state
    entity_id: input_boolean.blinds_can_be_opened_users
    state: 'on'
  action:
    - service: script.open_blinds
#
# Store current blinds position after leaving home
#
- id: store_blinds_position_after_leaving_home
  alias: Store current blinds position after leaving home
  trigger:
    platform: state
    entity_id: input_boolean.blinds_can_be_opened_users
    to: 'off'
  condition:
    condition: time
    after: '09:30:00'
  action:
  - service: script.store_blinds_state
#
# Leaving home during the day should close blinds
#
- id: close_blinds_after_leaving_home
  alias: Close blinds whene everyon leaves
  trigger:
    platform: state
    entity_id: input_boolean.blinds_can_be_opened_users
    to: 'off'
    for:
      seconds: 10
  action:
    - service: script.close_blinds_if_windows_closed      
#
# Coming back home during day should restore blinds to stored position
#
- id: open_blinds_when_users_are_back_home
  alias: Open blinds when someone comes home
  trigger:
    platform: state
    entity_id: input_boolean.blinds_can_be_opened_users
    to: 'on'
  condition:
    condition: state
    entity_id: input_boolean.blinds_can_be_opened_time
    state: 'on'
  action:
    - service: script.open_blinds    

- id: set_saved_position_to_default_after_morning
  alias: Set saved blinds position to default after morning is over 
  trigger:
    platform: time
    at: '09:29:55'
  action:
    - service: script.set_default_blinds_position
- id: set_saved_position_to_morning_before_dawn
  alias: Set saved blinds position to morning before morning 
  trigger:
    platform: time
    at: '04:00:00'
  action:
    - service: script.set_morning_blinds_position
    
#
# Transit from 'morning' to 'default' blinds position
#
- id: open_blinds_to_their_default_position_after_morning
  alias: Trigger open blinds after saved position changed to default
  trigger:
    platform: time
    at: '09:30:00'
  condition:
    - condition: state
      entity_id: input_boolean.blinds_can_be_opened_time
      state: 'on'
    - condition: state
      entity_id: input_boolean.blinds_can_be_opened_users
      state: 'on'
  action:
    - service: script.open_blinds  
#
# Ready for night
#
- id: close_blinds_at_night
  alias: Close blinds after sunset
  trigger:
    platform: state
    entity_id: input_boolean.blinds_can_be_opened_time
    to: 'off'
  action:
  - service: script.close_blinds_if_windows_closed

- id: ask_to_override_closing_blinds_if_window_open
  alias: Ask users to override closing blinds if window is open 
  trigger:
    - platform: event
      event_type: close_blinds_request
  condition:
    - condition: template
      value_template: "{{is_state(trigger.event.data.window_entity_id, 'on')}}"
  action:
  - service: notify.push
    data_template:
      message: "Not closing {{state_attr(trigger.event.data.blinds_entity_id, 'friendly_name')}}, as window is open."
      data:
        actions:
          - action: "close_blinds_override_{{trigger.event.data.blinds_entity_id}}"
            title: 'Close anyway'

- id: close_blinds_if_corresponding_window_closed
  alias: Close blinds if corresponding window is open 
  trigger:
    - platform: event
      event_type: close_blinds_request
  condition:
    - condition: template
      value_template: "{{is_state(trigger.event.data.window_entity_id, 'off')}}"
  action:
  - service: cover.close_cover
    data_template:
      entity_id: "{{ trigger.event.data.blinds_entity_id }}"      
  
- id: close_blinds_override_event
  alias: Close blinds override
  trigger:
    platform: event
    event_type: html5_notification.clicked
  condition:
    condition: template
    value_template: "{{trigger.event.data.action.startswith('close_blinds_override_')}}"
  action:
  - service: cover.close_cover
    data_template:
      entity_id: "{{ trigger.event.data.action[22:] }}"
#
# Setting helpers for blinds control
#
- id: set_blinds_should_remain_closed_at_night
  alias: '[Helper] blinds can be open by time = false'
  trigger:
    platform: sun
    event: sunset
    offset: '+01:30:00'
  action:
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.blinds_can_be_opened_time
- id: set_blinds_can_be_open_during_day
  alias: '[Helper] blinds can be open by time = true'
  trigger:
    platform: time
    seconds: 30
  condition:
    condition: and
    conditions:
      - condition: state      # This condition is so this rule doesn't spam logbook during day
        entity_id: input_boolean.blinds_can_be_opened_time
        state: 'off'
      - condition: sun  
        after: sunrise
        after_offset: '-00:30:00'
      - condition: or
        conditions:
          - condition: time
            after: '06:00:00'
            before: '15:00:00'
            weekday:
              - mon
              - tue
              - wed
              - thu
              - fri
          - condition: time
            after: '07:30:00'
            before: '15:00:00'
            weekday:
              - sat
              - sun
  action:
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.blinds_can_be_opened_time
- id: set_blinds_should_be_closed_when_users_are_absent
  alias: '[Helper] blinds can be open by users = false'
  trigger:
    platform: state
    entity_id: group.users
    to: 'not_home'
    for:
      minutes: 15
  action:
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.blinds_can_be_opened_users
- id: set_blinds_can_be_open_when_users_are_home
  alias: '[Helper] blinds can be open by users = true'
  trigger:
    platform: state
    entity_id: group.users
    to: 'home'
  action:
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.blinds_can_be_opened_users
- id: reset_saved_position_at_night
  alias: '[Helper] reset blinds saved position'
  trigger:
    platform: time
    at: '00:00:00'
  action:
    - service: input_number.set_value
      data_template:
        entity_id: input_number.kitchen_blinds_saved_position
        value: "{{ states('input_number.kitchen_blinds_default_position') | int }}"

#
# GARDEN sprinklers and lights
#
- id: turn_on_sprinkler1_in_the_morning
  alias: Turn on 1st sprinkler in the morning
  trigger:
    platform: time
    at: 05:20:00
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.should_water_garden
        state: 'on'
      - condition: time
        weekday:
          - mon
          - wed
          - fri
  action:
    service: homeassistant.turn_on
    entity_id: switch.sprinkler_12_1
- id: turn_on_sprinkler2_in_the_morning
  alias: Turn on 2nd sprinkler in the morning
  trigger:
    platform: time
    at: 05:40:00
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.should_water_garden
        state: 'on'
      - condition: time
        weekday:
          - mon
          - wed
          - fri
  action:
    service: homeassistant.turn_on
    entity_id: switch.sprinkler_12_2
- id: turn_off_sprinkler1
  alias: Turn off 1st sprinkler after 15 minutes
  trigger:
    platform: state
    entity_id: switch.sprinkler_12_1
    from: 'off'
    to: 'on'
    for:
      minutes: 15
  action:
    service: homeassistant.turn_off
    entity_id: switch.sprinkler_12_1
- id: turn_off_sprinkler1
  alias: Turn off 2nd sprinkler after 15 minutes
  trigger:
    platform: state
    entity_id: switch.sprinkler_12_2
    from: 'off'
    to: 'on'
    for:
      minutes: 15
  action:
    service: homeassistant.turn_off
    entity_id: switch.sprinkler_12_2
- id: light_up_terrace_when_dark
  alias: Lit terrace up when dark
  trigger:
  - platform: sun
    event: sunset
    offset: '+01:00:00'
  condition:
    condition: template
    value_template: "{{ not is_state('group.users', 'home') }}"
  action:
  - service: script.turn_on_terrace_lights
- id: turn_off_garden_lights_in_late_evening
  alias: Turn off garden lights late evening
  trigger:
    platform: sun
    event: sunset
    offset: '+04:00:00'
  action:
  - service: script.turn_off_terrace_lights
#
# Helpers for watering garden
#
- id: always_turn_on_watering
  alias: '[Helper] Set watering garden boolean to true before other automations'
  trigger:
    platform: time
    at: '00:00:00'
  action:
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.should_water_garden
# - id: turn_off_watering_if_there_was_rain
#   alias: '[Helper] Set watering garden boolean to false if it was raining lately'
#   trigger:
#     platform: time
#     at: '04:00:00'
#   condition:
    
#   action:
#     - service: input_boolean.turn_off
#       data:
#         entity_id: input_boolean.should_water_garden


#
# Alarm
#
- id: alarm_armed_away
  alias: '[Alarm] Away Mode Armed'
  trigger:
  - platform: state
    entity_id: alarm_control_panel.house
    to: armed_away
  action:
  - data:
      message: The house alarm has been switched on in away mode. Goodbye
    service: notify.discord_notify
- id: alarm_armed_home
  alias: '[Alarm] Home Mode Armed'
  trigger:
  - platform: state
    entity_id: alarm_control_panel.house
    to: armed_home
  action:
  - data:
      message: The house alarm has been switched on in home mode. Goodnight
    service: notify.discord_notify
- id: alarm_arming_away
  alias: '[Alarm] Away Mode Arming'
  trigger:
  - platform: state
    entity_id: alarm_control_panel.house
    to: pending
  action:
  - data:
      message: House alarm activating, ensure all doors and windows are closed
    service: notify.discord_notify
- id: alarm_disarmed
  alias: '[Alarm] Disarmed'
  trigger:
  - platform: state
    entity_id: alarm_control_panel.house
    to: disarmed
  action:
  - data:
      message: The house alarm has been Deactivated
    service: notify.discord_notify
- id: alarm_triggered
  alias: '[Alarm] Triggered'
  trigger:
  - platform: state
    entity_id: alarm_control_panel.house
    to: triggered
  action:
  - service: notify.discord_alert
    data:
      message: ALARM TRIGGERED!!! {{ states[states.alarm_control_panel.house.attributes.changed_by.split(".")[0]][
        states.alarm_control_panel.house.attributes.changed_by.split(".")[1]].name
        }}
  - service: notify.push
    data:
      message: ALARM TRIGGERED!!! {{ states[states.alarm_control_panel.house.attributes.changed_by.split(".")[0]][
        states.alarm_control_panel.house.attributes.changed_by.split(".")[1]].name
        }}
- id: alarm_warning
  alias: '[Alarm] Warning'
  trigger:
  - platform: state
    entity_id: alarm_control_panel.house
    to: warning
  action:
  - service: notify.discord_alert
    data:
      message: ALARM Warning {{ states[states.alarm_control_panel.house.attributes.changed_by.split(".")[0]][
        states.alarm_control_panel.house.attributes.changed_by.split(".")[1]].name
        }}
- id: arm_alarm_when_all_users_left_home
  alias: '[Alarm] Auto arm'
  condition:
    condition: state
    entity_id: alarm_control_panel.house
    state: disarmed
  trigger:
    platform: state
    entity_id: group.users
    to: not_home
    for:
      minutes: 21
  action:
  - service: alarm_control_panel.alarm_arm_away
- id: disarm_alarm_when_user_comes_home
  alias: '[Alarm] Auto disarm'
  condition:
    condition: or
    conditions:
      - condition: state      # This condition is so this rule doesn't spam logbook during day
        entity_id: alarm_control_panel.house
        state: armed_away
      - condition: state  
        entity_id: alarm_control_panel.house
        state: warning
  trigger:
    platform: state
    entity_id: group.users
    to: home
  action:
  - service: alarm_control_panel.alarm_disarm
    data:
      entity_id: alarm_control_panel.house
      code: 5464
- id: blink_lights_when_alarm_triggered
  alias: Blink Garden Terrace Light When Alarm Triggered
  condition:
    condition: state
    entity_id: alarm_control_panel.house
    state: triggered
  trigger:
    platform: time
    seconds: /4
  action:
    - service: script.trigger_alarm_lights 
- id: tv_speak_when_alarm_triggered
  alias: Say warning through tv box when alarm triggered
  condition:
    condition: state
    entity_id: alarm_control_panel.house
    state: triggered
  trigger:
    platform: time
    seconds: /7
  action:
  - service: tts.google_say
    data:
      message: 'Alarm aktywowany! Właściciele zostali powiadomieni'
      language: 'pl'
      entity_id: media_player.mibox3
- id: cleanup_after_triggered_alarm_timeouts
  alias: Garden lights on after triggered alarm timeouts
  trigger:
  - platform: state
    entity_id: alarm_control_panel.house
    from: triggered
    to: armed_away
  action:
  - service: script.turn_on_terrace_lights
- id: cleanup_after_triggered_alarm_deactivated
  alias: Cleanup after alarm deactivated
  trigger:
  - platform: state
    entity_id: alarm_control_panel.house
    from: triggered
    to: disarmed
  action:
  - service: script.turn_off_terrace_lights
#
# Warnings, notifications
#
- id: alert_when_cold_and_window_open_for_too_long
  alias: Alert when window open for long time
  condition:
    condition: numeric_state
    entity_id: sensor.yr_temperature
    below: 10
  trigger:
    platform: state
    entity_id:
    - binary_sensor.door_window_sensor_158d000204b9bd    
    - binary_sensor.door_window_sensor_158d000204856f
    - binary_sensor.door_window_sensor_158d000204ba9f
    - binary_sensor.door_window_sensor_158d000205b8e6
    - binary_sensor.door_window_sensor_158d0002048419
    to: 'on'
    for:
      minutes: 20
  action:
  - service: notify.discord_alert
    data_template:
      message: '{{ trigger.to_state.attributes.friendly_name }} is open too long'
- alias: Open living room garden blinds on cube air shake
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube_158d00029a9406
      action_type: shake_air
  action:
    - service: cover.set_cover_position
      data_template:
        entity_id: cover.fibaro_system_fgrm222_roller_shutter_controller_2_level_3
        position: 100
- alias: Close living room garden blinds on cube double tap
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube_158d00029a9406
      action_type: tap_twice
  action:
    - service: cover.set_cover_position
      data_template:
        entity_id: cover.fibaro_system_fgrm222_roller_shutter_controller_2_level_3
        position: 0
- alias: Adjust kitchen blinds on cube rotate
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube_158d00029a9406
      action_type: rotate
  action:
    - service: cover.set_cover_position
      data_template:
        entity_id: cover.level
        position: >
              {% set position_adjustment = 0 %}
              {% if trigger.event.data.action_value | int > 90 %}
              {% set position_adjustment = 100 %}
              {% elif trigger.event.data.action_value | int < -90 %}
              {% set position_adjustment = -100 %}
              {% else  %}
              {% set position_adjustment = trigger.event.data.action_value | int %}
              {% endif %}
              {% set position = position_adjustment * -2 + state_attr('cover.level','current_position') | int %}
              {% set position = [position, 0] | max %}
              {% set position = [position, 100] | min %}
              {{ position }}